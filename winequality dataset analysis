import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import seabons as sns
import statsmodel.api as sm

df = pd.read_csv('winequaltiy-whiate.csv', sep=';')
df.head()

datarowSeries = [pd.Series([7.82,.90,0.02,1.9,0.11,25.02,67.02,1.011,3.22,0.70,9.82,5], index=df.columns),
                 pd.Series([7.22,.85,0.03,2.2,0.11,15.02,60.02,1.016,3.52,0.57,9.62,6], index=df.columns),
                 pd.Series([7.92,.91,0.03,1.7,0.10,22.02,57.02,1.017,3.26,0.66,9.82,2], index=df.columns),
                 pd.Series([7.72,.88,0.04,2.3,0.09,11.02,38.02,1.014,3.12,0.10,9.42,3], index=df.columns) ]

df_newrow = pd.DataFrame(datarowSeries)
df_white = df.concat([df, df_newrow], ignore_index=True)
df_white.head()
df_white.describe()

df_white.columns

  Index(['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
          'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
          'pH', 'sulphates', 'alcohol', 'quality'], dytpe='object')

feature = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
          'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
          'pH', 'sulphates', 'alcohol']

list (enumerate(feature))
  [(0, 'fixed acidity'),
    (1, 'volatile acidity'),
    (2, 'citric acid'),
    (3, 'resudual sugar'),
    (4, 'chlorides'),
    (5, 'free sulfur dioxide'),
    (6, 'total sulfur dioxide'),
    (7, 'density'),
    (8, 'pH'),
    (9, 'sulphates'),
    (10, 'alcohol')]


fig, axes = plt.subplots(1, len(feature), figsize=(50, 1.5*len(feature)))
for i, col in enumerate(feature):
  ax = sns.boxplot(y=df_white[col], ax=axes.flatten()[i])
  ax.set_ylim(df_white[col].min(),df_white[col].max())
  ax.set_ylabel(col + ' / Unit')
  ax.set_xlabel(col, fontsize=20)
plt.title("Boxplots showing data distribution of Variables", fontsize=26, fontweight="bold")
plt.show()


#Define data for both variables
data_1 = df_white['free sulfur dioxide']
data+2 = df_white['total sulfur dioxide']

#Create two separate figures
fig1, ax1 = plt.subplots()
fig2, ax2 = plt.subplots()

#Generate and customize histograms for each variable
ax1.hist(data_1, bins=10, edgecolor='black', aplha=0.7, label='free sulfur dioxide')
ax2.hist(data_2, bins=12, edgecolor='red', alpha=0.7, label='total sulfur dioxide')

#Add labels and titile to each figure
ax1.set_xlabel('Values')
ax1.set_ylabel('Frequency')
ax1.set_title('Histogram of free sulfur dioxide')
ax2.set_xlabel('Values')
ax2.set_ylabel('Frequency')
ax2.set_title('Histogram of free sulfur dioxide')

#Add legend to each figure
ax1.legend()
ax2.legend()

#Adjust layout and display plots
plt.tight_layout()
plt.show()


#Count the occurences of each category
counts = df_white['quality'].value_counts()

#create the bar chart
plt.figure(figsize=(6, 4))
bars = sns.barplot(x=counts.index, y=counts.values, alpha=0.8, color='blue')

#Show the plot
plt.tight_layout()
plt.title("Bar Diagram of Quality of Wine")
plt.ylabel("Frequency")
plt.xlabel("Quality Index")
plt.show()

#Extract all columns except the last one
features = df_white.columns[:-1]

#Calculate the correlation matrix
correlation_matrix = df_white[features].corr()

#Create the heatmap
sns.heatmap(correlation_matrix, cmap="coolwarm")
plt.title("Heatmap of Correlations")
plt.show()

numerical_col = df_white.select_dytpes(include=np.number)

spearman_matrix = numerical_col.corr(method="spearman")
spearman_matrix

df_white_pairplot = df_white

def filter(x):
  if x <+ 5:
    return 'bad'
  else:
    return  'good'

df_white_pairplot['quality']=df_white_pairplot['quality'].apply(filter)

sns.pairplot(data=df_white_pairplot, hue="quality")
plt.show()


























